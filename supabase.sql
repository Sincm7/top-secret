-- Enable extension for uuid if needed
-- create extension if not exists "uuid-ossp";

-- USERS
create table if not exists public.users (
  id uuid primary key default gen_random_uuid(),
  username text unique not null,
  password_hash text not null,
  role text not null default 'member',
  created_at timestamp with time zone default now()
);

-- MESSAGES
create table if not exists public.messages (
  id bigint generated by default as identity primary key,
  content text not null,
  sender_id uuid references public.users(id) on delete set null,
  sender_name text,
  created_at timestamp with time zone default now()
);

-- TASKS
create table if not exists public.tasks (
  id bigint generated by default as identity primary key,
  title text not null,
  description text,
  status text not null default 'not_started',
  assignee_id uuid references public.users(id) on delete set null,
  assignee_name text,
  created_by uuid references public.users(id) on delete set null,
  created_at timestamp with time zone default now()
);

-- APPS / FILES
create table if not exists public.apps (
  id bigint generated by default as identity primary key,
  name text not null,
  description text,
  status text not null default 'downloadable', -- development | update | downloadable
  path text not null,
  size bigint,
  uploaded_by uuid references public.users(id) on delete set null,
  download_url text,
  created_at timestamp with time zone default now()
);

-- Simple RPC to count users for init guard
create or replace function public.count_users()
returns table(count bigint)
language sql
as $$
  select count(*) as count from public.users;
$$;

-- RLS (optional): We rely on service role key in server-side API. Keep RLS enabled by default; no anon policies needed.
-- alter table public.users enable row level security;
-- alter table public.messages enable row level security;
-- ... (Policies not required if only service role key is used in server-side)
